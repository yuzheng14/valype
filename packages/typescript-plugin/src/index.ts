import type * as ts from 'typescript/lib/tsserverlibrary'

/**
 * TypeScript language service plugin for .valype.ts files
 */
export default function init({ typescript }: { typescript: typeof ts }) {
  function create(info: ts.server.PluginCreateInfo) {
    console.log(
      '[valype] plugin initialized with TypeScript version:',
      typescript.version,
    )
    // Set up decorator
    const proxy: ts.LanguageService = Object.create(null)
    const valypeFileRegex = /\.valype\.ts$/

    for (const key of Object.keys(info.languageService) as Array<
      keyof ts.LanguageService
    >) {
      const x = info.languageService[key]
      // @ts-expect-error - JS runtime trickery which is tricky to type properly
      proxy[key] = (...args: unknown[]) => x.apply(info.languageService, args)
    }

    // Hook into file reading
    // Simple proxy for diagnostics and completions
    // Actual file transformation should be done in build step
    info.languageService.getProgram()?.getSourceFile

    // Add support for .valype.ts files
    proxy.getSemanticDiagnostics = (filename) => {
      console.log('[valype] getSemanticDiagnostics called for file:', filename)
      const prior = info.languageService.getSemanticDiagnostics(filename)
      if (!valypeFileRegex.test(filename)) {
        console.log(
          '[valype] file not matched by pattern:',
          valypeFileRegex,
          'filename:',
          filename,
        )
        return prior
      }

      // Add custom diagnostics for valype files
      return prior
    }

    // Add completions for generated functions
    proxy.getCompletionsAtPosition = (filename, position, options) => {
      console.log(
        '[valype] getCompletionsAtPosition called at:',
        position,
        'in:',
        filename,
      )
      const prior = info.languageService.getCompletionsAtPosition(
        filename,
        position,
        options,
      )

      if (!valypeFileRegex.test(filename) || !prior) {
        console.log(
          '[valype] completions skipped:',
          !valypeFileRegex.test(filename)
            ? 'not valype file'
            : 'no prior completions',
        )
        return prior
      }

      // Add completions for validate/is/assert functions
      return prior
    }

    // Add quick info for generated functions
    proxy.getQuickInfoAtPosition = (filename, position) => {
      console.log(
        '[valype] getQuickInfoAtPosition called at:',
        position,
        'in:',
        filename,
      )
      const prior = info.languageService.getQuickInfoAtPosition(
        filename,
        position,
      )
      if (!valypeFileRegex.test(filename) || !prior) {
        console.log(
          '[valype] quick info skipped:',
          !valypeFileRegex.test(filename) ? 'not valype file' : 'no prior info',
        )
        return prior
      }

      const sourceFile = info.languageService
        .getProgram()
        ?.getSourceFile(filename)
      if (!sourceFile) return prior

      const node = findNode(sourceFile, position)
      if (!node || !typescript.isIdentifier(node)) return prior

      const functionName = node.getText()
      if (
        functionName.startsWith('validate') ||
        functionName.startsWith('is') ||
        functionName.startsWith('assert')
      ) {
        const interfaceName = functionName.replace(/^validate|^is|^assert/, '')
        const displayString = functionName.startsWith('validate')
          ? `(function) validate${interfaceName}(data: unknown): $ZodIssue[] | undefined`
          : functionName.startsWith('is')
            ? `(function) is${interfaceName}(data: unknown): data is ${interfaceName}`
            : `(function) assert${interfaceName}(data: unknown): asserts data is ${interfaceName}`
        console.log(
          '[valype] generated quick info for function:',
          functionName,
          'with display:',
          displayString,
        )

        return {
          ...prior,
          displayParts: [{ text: displayString, kind: 'text' }],
          documentation: [{ text: 'Generated by valype plugin', kind: 'text' }],
        }
      }

      return prior
    }

    function findNode(
      sourceFile: ts.SourceFile,
      position: number,
    ): ts.Node | undefined {
      let result: ts.Node | undefined
      sourceFile.forEachChild(function visit(node) {
        if (node.getStart() <= position && position < node.getEnd()) {
          result = node
          node.forEachChild(visit)
        }
      })
      return result
    }

    return proxy
  }

  return { create } satisfies ts.server.PluginModule
}
