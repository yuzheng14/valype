import { generate } from '../generate'
import { describe, it, expect } from 'vitest'

describe('generate function', () => {
  it('should convert interface with type keyword to zod schema', async () => {
    const code = `
      export interface User {
        uid: symbol
        name: string
        age: number
        isActive: boolean
        balance: bigint
        superpower: undefined
        lastLogin: null
        metadata: any
        preferences: unknown
        logout: void
        neverField: never
      }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const UserSchema = z.object({
        uid: z.symbol(),
        name: z.string(),
        age: z.number(),
        isActive: z.boolean(),
        balance: z.bigint(),
        superpower: z.undefined(),
        lastLogin: z.null(),
        metadata: z.any(),
        preferences: z.unknown(),
        logout: z.void(),
        neverField: z.never(),
      })

      ",
        "exports": [
          {
            "interface": "User",
            "schema": "UserSchema",
          },
        ],
      }
    `)
  })

  it('should handle interfaces with union type property', async () => {
    const code = `
      interface Tel {
        areaCode?: string | null
        tel: string | undefined
      }

      export interface User {
        tel: Tel | string | null
      }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      const TelSchema = z.object({
        areaCode: z.union([z.string(), z.null()]).optional(),
        tel: z.union([z.string(), z.undefined()]),
      })

      export const UserSchema = z.object({
        tel: z.union([TelSchema, z.string(), z.null()]),
      })

      ",
        "exports": [
          {
            "interface": "User",
            "schema": "UserSchema",
          },
        ],
      }
    `)
  })

  it('should handle optional properties', async () => {
    const code = `
      export interface Product {
        id: string
        name?: string
        price: number
      }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const ProductSchema = z.object({
        id: z.string(),
        name: z.string().optional(),
        price: z.number(),
      })

      ",
        "exports": [
          {
            "interface": "Product",
            "schema": "ProductSchema",
          },
        ],
      }
    `)
  })

  it('should handle array types', async () => {
    const code = `
      export interface Order {
        items: string[];
        quantities: number[];
      }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const OrderSchema = z.object({
        items: z.array(z.string()),
        quantities: z.array(z.number()),
      })

      ",
        "exports": [
          {
            "interface": "Order",
            "schema": "OrderSchema",
          },
        ],
      }
    `)
  })

  it('should handle nested interfaces', async () => {
    const code = `
      export interface Address {
        street: string
        city: string
      }

      export interface Person {
        name: string
        address: Address
      }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const AddressSchema = z.object({
        street: z.string(),
        city: z.string(),
      })

      export const PersonSchema = z.object({
        name: z.string(),
        address: AddressSchema,
      })

      ",
        "exports": [
          {
            "interface": "Address",
            "schema": "AddressSchema",
          },
          {
            "interface": "Person",
            "schema": "PersonSchema",
          },
        ],
      }
    `)
  })

  it('should handle extended interfaces', async () => {
    const code = `
      export interface Id {
        id: string
      }

      export interface Name {
        name: string
      }

      export interface IdName extends Id, Name {}

      export interface User extends IdName {
        name: string
        age: number
      }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const IdSchema = z.object({
        id: z.string(),
      })

      export const NameSchema = z.object({
        name: z.string(),
      })

      export const IdNameSchema = z.object({
        ...IdSchema.shape,
        ...NameSchema.shape,
      })

      export const UserSchema = z.object({
        ...IdNameSchema.shape,
        name: z.string(),
        age: z.number(),
      })

      ",
        "exports": [
          {
            "interface": "Id",
            "schema": "IdSchema",
          },
          {
            "interface": "Name",
            "schema": "NameSchema",
          },
          {
            "interface": "IdName",
            "schema": "IdNameSchema",
          },
          {
            "interface": "User",
            "schema": "UserSchema",
          },
        ],
      }
    `)
  })

  it('should handle interfaces unexported', async () => {
    const code = `
    interface Id {
      id: string
    }
    
    interface Name {
      name: string
    }
    
    export interface User extends Name {
      age: number
    }
    `

    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      const NameSchema = z.object({
        name: z.string(),
      })

      export const UserSchema = z.object({
        ...NameSchema.shape,
        age: z.number(),
      })

      ",
        "exports": [
          {
            "interface": "User",
            "schema": "UserSchema",
          },
        ],
      }
    `)
  })

  it('should handle interfaces have literal types', async () => {
    const code = `
    export interface User {
      name: {
        first: string
        last: string
      }
      age: number
    }
    `
    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const UserSchema = z.object({
        name: z.object({
        first: z.string(),
        last: z.string(),
      }),
        age: z.number(),
      })

      ",
        "exports": [
          {
            "interface": "User",
            "schema": "UserSchema",
          },
        ],
      }
    `)
  })

  it('should handle simple type alias', async () => {
    const code = `
    export type Age = number
    export type Gender = 'male' | 'female'
    `
    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      export const AgeSchema = z.number()

      export const GenderSchema = z.union([z.literal('male'), z.literal('female')])

      ",
        "exports": [
          {
            "interface": "Age",
            "schema": "AgeSchema",
          },
          {
            "interface": "Gender",
            "schema": "GenderSchema",
          },
        ],
      }
    `)
  })

  it('should handle type alias with literal', async () => {
    const code = `
    type Age = number
    type Gender = 'male' | 'female'
    export type Person = {
      age: Age
      gender: Gender | 'unknown'
    }
    export type User = Person
    `
    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      const AgeSchema = z.number()

      const GenderSchema = z.union([z.literal('male'), z.literal('female')])

      export const PersonSchema = z.object({
        age: AgeSchema,
        gender: z.union([GenderSchema, z.literal('unknown')]),
      })

      export const UserSchema = PersonSchema

      ",
        "exports": [
          {
            "interface": "Person",
            "schema": "PersonSchema",
          },
          {
            "interface": "User",
            "schema": "UserSchema",
          },
        ],
      }
    `)
  })

  it('should handle type alias with type reference', async () => {
    const code = `
    type Age = number
    type Gender = 'male' | 'female'
    type Tel = {
      areaCode?: string | null
      tel: string | undefined
    }
    export type Person = {
      age: Age
      gender: Gender | 'unknown'
      address?: {
        city: string
        postalCode: string
      }
      tel?: Tel | string | null
    }
    `
    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      const AgeSchema = z.number()

      const GenderSchema = z.union([z.literal('male'), z.literal('female')])

      const TelSchema = z.object({
        areaCode: z.union([z.string(), z.null()]).optional(),
        tel: z.union([z.string(), z.undefined()]),
      })

      export const PersonSchema = z.object({
        age: AgeSchema,
        gender: z.union([GenderSchema, z.literal('unknown')]),
        address: z.object({
        city: z.string(),
        postalCode: z.string(),
      }).optional(),
        tel: z.union([TelSchema, z.string(), z.null()]).optional(),
      })

      ",
        "exports": [
          {
            "interface": "Person",
            "schema": "PersonSchema",
          },
        ],
      }
    `)
  })

  it('should handle type alias with nested literal', async () => {
    const code = `
    type Age = number
    type Gender = 'male' | 'female'
    export type Person = {
      age: Age
      gender: Gender | 'unknown'
      address?: {
        city: string
        postalCode: string
      }
    }
    `
    expect(await generate(code)).toMatchInlineSnapshot(`
      {
        "code": "// generated by valype
      import { z } from 'zod/v4'

      const AgeSchema = z.number()

      const GenderSchema = z.union([z.literal('male'), z.literal('female')])

      export const PersonSchema = z.object({
        age: AgeSchema,
        gender: z.union([GenderSchema, z.literal('unknown')]),
        address: z.object({
        city: z.string(),
        postalCode: z.string(),
      }).optional(),
      })

      ",
        "exports": [
          {
            "interface": "Person",
            "schema": "PersonSchema",
          },
        ],
      }
    `)
  })

  it('should handle type alias with intersection type', async () => {
    const code = `
    type Age = number
    type Gender = 'male' | 'female'
    type Contact = {
      email: string
    }
    type Tel = {
      areaCode?: string | null
      tel: string | undefined
    }
    type Address = {
      city: string
      postalCode: string
    }
    type PersonBase = {
      age: Age
      gender: Gender | 'unknown'
    }
    type PersonDetails = {
      address?: Address
      tel?: Tel | string | null
    }
    export type Person = PersonBase & PersonDetails & Contact
    `
    expect(await generate(code)).toBeDefined()
  })

  describe('from production environment', () => {
    it('协同调阅', async () => {
      const code = `
export interface Data {
  /** 医疗机构 */
  medicalInstitution: {
    /** 名称 */
    name: string
    /** 代码 */
    code: string
    origin: string
    /** 登录 */
    login: {
      /** 用户名 */
      name: string
      /** 密码 */
      password: string
    }
  }

  /** 医生 */
  doctor: {
    /** 姓名 */
    name: string
    /**
     * 科室
     * @example "内科"
     */
    department: string
    /** 工号 */
    employeeId: string
  }

  /** 患者 */
  patient: {
    /** 身份证号 */
    idNo: string
    /** 姓名 */
    name: string
    /**
     * 年龄
     * @example "34"
     */
    age: string
    /**
     * 生理性别
     * @example "男" | "女"
     */
    sex: '男' | '女'
    /** 就诊号 */
    appointmentId: string
  }
}`

      // TODO this can't be handled currently
      expect(await generate(code)).toMatchInlineSnapshot(`
        {
          "code": "// generated by valype
        import { z } from 'zod/v4'

        export const DataSchema = z.object({
          medicalInstitution: z.object({
          name: z.string(),
          code: z.string(),
          origin: z.string(),
          login: z.object({
          name: z.string(),
          password: z.string(),
        }),
        }),
          doctor: z.object({
          name: z.string(),
          department: z.string(),
          employeeId: z.string(),
        }),
          patient: z.object({
          idNo: z.string(),
          name: z.string(),
          age: z.string(),
          sex: z.union([z.literal('男'), z.literal('女')]),
          appointmentId: z.string(),
        }),
        })

        ",
          "exports": [
            {
              "interface": "Data",
              "schema": "DataSchema",
            },
          ],
        }
      `)
    })
  })
})
